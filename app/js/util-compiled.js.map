{"version":3,"sources":["util.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAiBA,SAAS,OAAO,CAAC,iBAAiB,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAC;AACnE,YAAQ,GAAG,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;AAC/B,UAAM,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC;AAChC,WAAO,GAAG,OAAO,IAAI,YAAU,EAAE,CAAC;AAClC,QAAI,OAAO,GAAG,CAAC;QAAE,MAAM,GAAG,IAAI;QAAE,aAAa,GAAG,KAAK;QAAE,aAAa,GAAG,KAAK,CAAC;AAC7E,UAAM,CAAC,CAAC,CAAC,CAAC;;AAEV,aAAS,YAAY,GAAE;AACnB,eAAO,GAAG,CAAC,CAAC;AACZ,YAAI,CAAC,aAAa,IAAI,CAAC,aAAa,EAAC;AACjC,yBAAa,GAAG,IAAI,CAAC;AACrB,mBAAO,EAAE,CAAC;SACb;KACJ;;AAED,aAAS,MAAM,CAAC,GAAG,EAAC;AAChB,YAAI,CAAC,MAAM,EAAE,OAAO;AACpB,YAAI,QAAQ,GAAG,GAAG,IAAI,MAAM,EAAE,OAAO,YAAY,EAAE,CAAC;;AAEpD,YAAI,iBAAiB,EAAE,EAAE;AACrB,mBAAO,GAAG,CAAC,CAAC;AACZ,yBAAa,GAAG,IAAI,CAAC;AACrB,mBAAO,EAAE,CAAC;SACb,MAAM,IAAI,MAAM,EAAC;AACd,mBAAO,GAAG,UAAU,CAAC,MAAM,EAAE,QAAQ,EAAE,GAAG,GAAC,CAAC,CAAC,CAAC;SACjD;KACJ;;AAED,aAAS,KAAK,GAAE;AACZ,cAAM,GAAG,KAAK,CAAC;AACf,YAAI,OAAO,GAAG,CAAC,EAAE;AACb,wBAAY,CAAC,OAAO,CAAC,CAAC;AACtB,mBAAO,GAAG,CAAC,CAAC;SACf;AACD,oBAAY,EAAE,CAAC;KAClB;;AAED,WAAO,EAAC,IAAI,EAAE,KAAK,EAAC,CAAC;CACxB","file":"util-compiled.js","sourcesContent":["/**\n * Created by webadnan on 8/29/15.\n */\n/**\n *\n * @param conditionFunction, callback will be fired if this condition is true\n * @param success\n * @param failure, will be called when try expires\n * @param expire, upto expire time it will keep trying\n * @param interval, the duration between two tries\n * @returns {*}\n *\n * To the users: please destroy this when element is destroyed\n * USAGES\n * var waitFor = WaitFor(c, s, f);\n * element.on('$destroy', function(){ waitFor.stop() });\n */\nfunction WaitFor(conditionFunction, success, failure, expire, interval){\n    interval = _und(interval, 100);\n    expire = _und(expire, 5 * 1000); // 5 secs\n    failure = failure || function(){};\n    var timerId = 0, enable = true, successCalled = false, failureCalled = false;\n    _check(0);\n\n    function _callFailure(){\n        timerId = 0;\n        if (!failureCalled && !successCalled){\n            failureCalled = true;\n            failure();\n        }\n    }\n\n    function _check(cnt){\n        if (!enable) return;\n        if (interval * cnt >= expire) return _callFailure();\n\n        if (conditionFunction()) {\n            timerId = 0;\n            successCalled = true;\n            success();\n        } else if (enable){\n            timerId = setTimeout(_check, interval, cnt+1);\n        }\n    }\n\n    function _stop(){\n        enable = false;\n        if (timerId > 0) {\n            clearTimeout(timerId);\n            timerId = 0;\n        }\n        _callFailure();\n    }\n\n    return {stop: _stop};\n}\n"]}